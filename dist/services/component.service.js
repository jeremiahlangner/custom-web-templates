(()=>{var t=class{static async getProvider(s){return await t._providers[s]}static load(){this._services=window.vcdc.services}static async getService(s){return t.load(),console.log(s,await t._services[s]),await t._services[s]}static registerServices(s){for(let i in s)this.registerService(i,s[i])}static registerService(s,i){t._services[s]=i,!window.vcdc.services[s]&&(window.vcdc.services[s]=i)}},r=t;r._providers={Application:Promise.resolve(window.vcdc)},r._services={};var e=class{constructor(){this._hashes=[];r.getProvider("Application").then(s=>{this._application=s})}hash(){let s="";for(;this._hashes.find(i=>i==s);)s=(Math.random()+1).toString(36).substring(7);return this._hashes.push(s),s}delete(s){}insert(s){}};})();
