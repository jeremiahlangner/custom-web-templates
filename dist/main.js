(()=>{var c=class{constructor(e,t,g){let m=this,v={get(n,s){return typeof n[s]=="object"&&n[s]!==null?new Proxy(n[s],v):(m._getter(s),n[s])},set(n,s,l){n[s]!==l&&(m._setter(s,l,n[s]),n[s]=l)}};return this._obj=new Proxy(g,v),this._obj}};var i=class{static async getProvider(e){return await i._providers[e]}static async getService(e){return console.log(i._services),await i._services[e]}static registerServices(e){for(let t in e)this.registerService(t,e[t])}static registerService(e,t){i._services[e]=t}},r=i;r._providers={Application:Promise.resolve(window.vcdc)},r._services={};var a=class{constructor(){}async request(e){let t=new Request(e.url,e);return fetch(t).then(g=>{console.log(g)})}};var p=class{constructor(){}};var h=class{constructor(){this._hashes=[];r.getProvider("Application").then(e=>{this._application=e})}hash(){let e="";for(;this._hashes.find(t=>t==e);)e=(Math.random()+1).toString(36).substring(7);return this._hashes.push(e),e}delete(e){}insert(e){}};var u=class{constructor(){this.changeList=[];window.vcdc={services:{},components:{},app:{}};let e=new c({},()=>{},this.changes);this.registerServices(),this.registerComponents()}changes(){for(let e of this.changeList);}async registerComponents(){let t=await(await r.getService("ApiService")).request({url:"./assets/configs/components.json"});console.log(t)}registerServices(){r.registerServices({ApiService:new a,Storage:new p,ComponentService:new h})}},A=new u;})();
